%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.8.4 (Build 12E55) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1276 1274
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
{ld}repeat pop
/SC{	
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		
/cm {cmmtx astore CM concat}bd	
/W{clip newpath}bd
/W*{eoclip newpath}bd
statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	
    true
}{
    pop	
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse
{	
    { 
	{ 
	    pop pop 
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd
/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd
/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd
/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	
dict begin
{def} repeat
pop		
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	
}bd
/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ 
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ 
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		
/cp_proc/x_proc ld 	
/base_charpath		
{
    /t_array xs
    /t_i 0 def
    { 
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ 
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ 
findfont dup length dict copy definefont pop
}bd
L3? dup dup{save exch}if
/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def
/setupFunEval 
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   
		    
	[ 
	    0 1 nRange 1 sub
	    { 
		    2 mul/nDim2 xd		
		    Range nDim2 get		
		    Range nDim2 1 add get	
		    1 index sub			
						
		    255 div			
		    exch			
	    }for
	]store
    end
}bd
/FunEval 
{
    begin
	
	nRange mul /val xd	
				
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd 
	    val	
	    add DataSource exch get 
	    mulRange nDim2 get mul 	
	    mulRange nDim2 1 add get 
	    add 
	}for	
    end
}bd
/max 
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd
/sh2
{	
	/Coords load aload pop 	
	3 index 3 index translate	
					
	3 -1 roll sub	
	3 1 roll exch 	
	sub				
	2 copy
	dup mul exch dup mul add sqrt	
	dup
	scale  
	atan	
	
	rotate		
	
	/Function load setupFunEval	
	
	
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	
	grestore	
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd
/shp	
{	
	4 copy
	
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
	
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd
/calcmaxs
{	
	
	xmin dup mul ymin dup mul add sqrt		
	xmax dup mul ymin dup mul add sqrt		
	xmin dup mul ymax dup mul add sqrt		
	xmax dup mul ymax dup mul add sqrt		
	max max max								
}bd
/sh3
{	
	/Coords load aload pop 	
	5 index 5 index translate	
	3 -1 roll 6 -1 roll sub		
	3 -1 roll 5 -1 roll sub		
	2 copy dup mul exch dup mul add sqrt
	/dx xs						
	2 copy 0 ne exch 0 ne or
	{
		
		exch atan rotate	
	}{
		pop pop
	}ifelse
	
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	
	/Nsteps xs		
	setupFunEval		
	
	
	
	
	
	dx r2 add r1 lt{
		
		0 
	}{
		dx r1 add r2 le
		{ 
			1
		}{ 
			r1 r2 eq
			{	
				2
			}{ 
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		
	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	
		{	
			0/Function load FunEval sc	
			
			
			
			
			{ 
				{	
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				}
				{	
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	
					
					
				
					
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	
					
				
					r2 r1 gt{	
						
						0 r1
						r1 neg r2 r1 sub div dx mul	
						0	
						shp	
					}{	
						
						
						
						0 r1 calcmaxs	
						dup
						
						r2 add dx mul dx r1 r2 sub sub div
						neg				
						exch 1 index	
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	
		}if
	}if
	
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	
	
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	
		{	
			Nsteps/Function load FunEval sc	
			
			
			
			
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				} 
				{	
					
					
					xmax abs r1 add r1 dx r1 shp
				}	
				{	
			
					r2 r1 gt{
						
						
						
						calcmaxs dup	
						
						r1 add dx mul dx r2 r1 sub sub div	
						exch 1 index	
						exch sub
						dx r2
						shp
					}{	
						
						r1 neg r2 r1 sub div dx mul	
						0		
						dx 		
						r2		
						shp
					}ifelse
				}
			}			
			sh3tp get exec	
		}if
	}if
}bd
/sh		
{	
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	
					2 index sub				
					3 index					
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd
{restore}if not dup{save exch}if
	L3?{	
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if
end
setpacking
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1276 1274
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9496 1.0000 1.0890 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4194 0.2144 0.0081 0.3502 0.7244 0.0935 0.1799 0.0612 0.9873 ] def 
/RangeLMN [ 0.0 0.9496 0.0 1.0000 0.0 1.0890 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.23529412 0.61960787 0.87450981 sc
q
599.35059 0.67650002 m
367.32791 15.21312 164.03111 151.72165 62.751301 360.98901 c
9.5454969 470.92441 -10.470657 595.28717 5.1738992 718.72363 c
15.384381 799.28534 42.435665 880.38165 82.705376 951.15375 c
126.53107 1028.1754 185.79356 1094.9792 258.10422 1148.8728 c
386.80276 1244.7925 549.11841 1288.2317 710.26965 1269.882 c
730.4679 1267.582 765.8855 1261.7061 768.62299 1260.2008 c
769.84198 1259.5305 767.82953 1258.6482 762.77875 1257.6385 c
745.96631 1254.2777 712.3819 1245.2523 691.50623 1238.485 c
619.75586 1215.2253 553.28149 1180.9084 494.68329 1136.8767 c
479.83139 1125.7168 479.67206 1125.6378 466.1116 1122.7161 c
378.04572 1103.7416 294.96555 1063.8444 225.85054 1007.3368 c
198.97998 985.36774 163.78296 948.68115 142.32457 920.27594 c
131.82373 906.37567 114.53099 880.93036 113.20176 877.42352 c
112.73656 876.19617 119.33662 881.70111 127.86865 889.65674 c
204.43013 961.04584 285.42178 1010.0496 375.7963 1039.6644 c
386.48053 1043.1656 395.91022 1045.8646 396.7511 1045.6624 c
397.59201 1045.46 393.65445 1039.4512 388.00095 1032.3096 c
374.99213 1015.8762 357.49847 990.13391 345.47229 969.72766 c
334.07474 950.38806 312.92514 907.09045 303.81305 884.44263 c
287.37845 843.59479 273.40341 794.01349 266.07858 750.56635 c
263.91406 737.7276 261.72067 726.86743 261.20435 726.43274 c
260.68805 725.99799 254.44775 721.63623 247.33705 716.74005 c
207.23808 689.12903 165.22496 647.74567 136.64024 607.70258 c
119.43545 583.60107 102.20399 552.91516 90.928307 526.29852 c
83.270836 508.22278 76.349998 488.66843 76.794029 486.36304 c
77.008186 485.25131 79.680412 488.36411 82.880318 493.45291 c
113.41293 542.00818 157.1087 590.70422 203.12222 627.45459 c
218.55167 639.77783 249.88261 661.72687 254.66075 663.56012 c
256.39203 664.2243 256.73383 659.96393 257.39175 629.51849 c
259.25775 543.16821 276.51416 465.57953 311.09 388.07877 c
316.96274 374.91525 l
308.57767 362.75818 l
286.41483 330.62531 268.41498 292.62057 257.81256 255.5732 c
250.49649 230.00903 250.82256 229.64774 262.2851 250.61719 c
273.78394 271.65302 281.77393 284.60968 293.91431 301.90762 c
306.56137 319.92746 330.22095 348.65851 331.33942 347.35486 c
331.64575 346.99777 334.71603 341.73886 338.16223 335.66843 c
377.33597 266.66415 437.47766 201.10783 504.12167 154.76743 c
520.17969 143.60162 549.08044 125.48586 551.00983 125.37668 c
551.63196 125.34149 543.41058 134.28299 532.74011 145.24669 c
497.94473 180.99814 472.88727 211.7119 447.30447 249.96794 c
420.14108 290.58759 399.47385 329.27747 382.88797 370.55807 c
375.33319 389.36118 l
382.73505 395.16626 l
403.92569 411.78558 439.89218 432.90015 466.1116 444.11346 c
485.60608 452.45071 526.66577 465.51764 533.36902 465.51764 c
534.02997 465.51764 534.97351 460.11267 535.46588 453.50659 c
541.30774 375.11826 571.91626 291.202 618.46887 225.94583 c
632.56439 206.18709 664.33698 169.27464 662.05859 175.30463 c
661.7887 176.0188 655.68073 188.28955 648.48535 202.57297 c
619.1145 260.87607 600.82806 319.44424 592.73981 381.11566 c
589.91107 402.68439 587.61389 449.97192 588.75 463.2453 c
589.72253 474.60709 l
616.09192 474.60709 l
663.37433 474.60709 698.30695 469.11591 741.43878 454.90335 c
756.6745 449.88297 786.31708 437.82837 788.55237 435.74393 c
789.10748 435.22626 787.84631 428.12811 785.74982 419.97025 c
770.26105 359.70108 770.19055 296.36438 785.54547 236.4548 c
788.30823 225.67567 792.40686 211.88965 794.65363 205.8192 c
800.31842 190.51369 810.54962 166.71062 811.18884 167.34976 c
811.4798 167.64066 810.55316 173.93192 809.12958 181.33034 c
795.75049 250.86322 800.41724 326.08771 821.94604 387.92194 c
828.95178 408.04337 830.15692 410.98099 831.40594 410.98099 c
833.18713 410.98099 846.97949 401.2464 860.83417 390.21072 c
933.42261 332.39175 982.90619 249.09837 1002.3929 151.93176 c
1004.5413 141.21921 1006.6818 129.15685 1007.1495 125.12654 c
1008 117.79871 l
989.33081 105.46286 l
900.13013 46.522621 800.98663 11.9243 692.73706 1.9599299 c
672.17206 0.066859998 620.43079 -0.64420003 599.35059 0.67650002 c
599.35059 0.67650002 l
599.35059 0.67650002 l
h
1019.1344 139.64848 m
1020.1199 153.80003 1018.1987 187.13165 1015.2794 206.53209 c
1003.1921 286.85818 965.25311 361.76508 907.41925 419.49158 c
895.88696 431.00241 879.69818 444.91388 861.26367 459.15433 c
857 462.44797 l
866.31036 476.29907 l
885.60138 504.99841 912.89966 535.20386 939.16498 556.91241 c
951.37006 567 l
961.25983 556.29614 l
1048.7164 461.64035 1096.8314 348.38437 1105.126 217.65489 c
1106 203.87869 l
1089.9127 187.78474 l
1067.3572 165.21973 1022.9006 127 1019.209 127 c
1018.6835 127 1018.65 132.69182 1019.1345 139.64848 c
1019.1344 139.64848 l
1019.1344 139.64848 l
h
1116.7712 219.96999 m
1122.1051 253.08565 1124.0145 297.92389 1121.4076 328.84863 c
1113.6263 421.15662 1079.0562 508.37537 1019.1387 586.86731 c
1007 602.7691 l
1021.4478 610.01605 l
1055.1791 626.93567 1092.8276 639.62653 1130.8414 646.89124 c
1138.582 648.37048 1145.3961 649.28357 1145.9839 648.92029 c
1147.6519 647.88922 1161.1266 605.974 1166.8063 584.14893 c
1188.6898 500.05917 1195.0255 414.20755 1186.0776 323.01544 c
1184.5663 307.61218 l
1174.8978 292.48553 l
1159.6758 268.67007 1134.6404 235.23808 1120.7645 220.19658 c
1115.9707 215 l
1116.7712 219.96999 l
1116.7712 219.96999 l
h
1206.0021 348.15109 m
1205.9397 348.98566 1207.3071 356.28076 1209.0409 364.3624 c
1229.0916 457.82977 1228.6428 553.57446 1207.6985 650.75775 c
1206.9996 654 l
1220.3229 653.63708 l
1233.4496 653.27954 1266.8458 650.04871 1272.8976 648.55096 c
1276 647.78308 l
1275.1331 620.68164 l
1272.6191 542.09332 1258.4576 472.06143 1230.9352 402.11292 c
1222.4885 380.64572 1206.207 345.40811 1206.0021 348.15109 c
1206.0021 348.15109 l
1206.0021 348.15109 l
h
361.88821 430.91721 m
342.75797 499.25748 334.46097 568.4267 337.67487 632.77521 c
339.18121 662.93561 343.73788 705.54181 345.64267 707.27667 c
346.85715 708.38281 383.70193 719.82666 396.14044 722.96106 c
450.45166 736.64716 506.35339 742.1601 561.21558 739.24054 c
577.289 738.38513 590.6825 737.44336 590.97882 737.14771 c
591.27515 736.85211 588.42505 730.03851 584.64526 722.00647 c
570.27563 691.47101 559.23669 660.93396 550.85535 628.53345 c
542.13293 594.81458 538.43097 572.22809 534.55249 529.06628 c
533.78949 520.57562 l
517.94562 515.69086 l
464.42154 499.18918 414.1842 471.34406 372.50143 435.07523 c
368.02917 431.18387 363.99536 428 363.53738 428 c
363.07944 428 362.33728 429.31274 361.88815 430.91721 c
361.88821 430.91721 l
361.88821 430.91721 l
h
799.52002 495.48544 m
776.46527 507.3114 738.90833 519.70453 707.62115 525.81036 c
678.88635 531.41815 662.81183 532.85968 628.77252 532.88129 c
604.63513 532.89661 596 533.30176 596 534.41888 c
596 537.7312 602.77655 568.91577 606.53009 582.87683 c
611.64484 601.90045 623.0993 635.20557 630.59271 652.84149 c
642.08636 679.89191 664.56592 722.54553 668.02826 723.87311 c
672.23041 725.48438 718.39484 711.448 750.14935 698.90411 c
799.78455 679.29681 845.23676 654.03833 887.05304 622.82465 c
901 612.414 l
885.01306 596.03003 l
857.8963 568.23987 836.52289 539.24561 819.24231 506.80826 c
814.60229 498.09839 810.2218 490.98468 809.50793 491.00003 c
808.79407 491.01532 804.2995 493.03381 799.52002 495.48544 c
799.52002 495.48544 l
799.52002 495.48544 l
h
950.17566 661.66113 m
927.53961 682.56262 882.49426 714.85992 850.72949 732.9635 c
817.4422 751.93488 776.56622 769.64398 736.98395 782.24261 c
725.18689 785.9975 715.31049 789.24695 715.03632 789.4635 c
713.93896 790.33051 737.92889 816.4184 757.33862 835.46521 c
791.37268 868.86304 820.19482 891.2478 861.77905 916.5791 c
876.92749 925.80682 918.50665 947.01849 921.41022 947 c
926.28906 946.96881 967.83069 912.21204 993.72394 886.49683 c
1041.2555 839.29224 1079.538 787.71625 1111.9364 727.23523 c
1116.0699 719.51886 1119.2419 713.01794 1118.9855 712.7887 c
1118.729 712.55951 1112.6693 711.39642 1105.5197 710.2041 c
1059.8357 702.58557 1012.5468 685.34113 969.54718 660.62 c
964.11462 657.49677 959.14227 654.9679 958.49756 655.00031 c
957.85284 655.03278 954.10797 658.03009 950.17566 661.66113 c
950.17566 661.66113 l
950.17566 661.66113 l
h
1268.5681 703.82953 m
1267.2867 705.11273 1228.4249 712.26385 1215.5029 713.5943 c
1208.005 714.36627 1198.8807 715.30792 1195.2268 715.68689 c
1188.5834 716.37592 l
1183.7222 729.63202 l
1158.7429 797.7489 1122.0891 861.24438 1075.4872 917.12762 c
1070.1198 923.56409 1054.4286 940.18018 1040.6179 954.05225 c
1026.8074 967.92438 1015.7315 979.49829 1016.0049 979.77216 c
1016.9984 980.76703 1049.2462 986.6568 1064.3431 988.60059 c
1096.6265 992.75732 1133.4974 994.11005 1158.3529 992.04974 c
1168.0675 991.24445 l
1177.4796 976.3045 l
1221.5822 906.29999 1252.3915 825.31378 1266.0302 743.53821 c
1271.8279 708.776 1272.3885 700.00323 1268.5681 703.82953 c
1268.5681 703.82953 l
1268.5681 703.82953 l
h
361.40448 782.04791 m
361.91333 784.36621 365.17664 794.90411 368.65625 805.46545 c
399.34598 898.61493 453.56931 987.20477 520.43225 1053.4365 c
536.14404 1069 l
565.66949 1068.7953 l
637.43781 1068.2977 708.47699 1054.4613 777.73529 1027.4908 c
798.58337 1019.3723 826.15698 1006.8537 841.17682 998.68811 c
852 992.80402 l
834.80695 983.80719 l
764.62097 947.07996 703.69348 896.79431 653.69519 834.32922 c
646.8783 825.81262 639.40442 816.05292 637.08655 812.64105 c
633.32196 807.09955 632.45636 806.50616 628.97461 807.07983 c
605.8858 810.8844 545.21783 812.63824 515.29291 810.36627 c
488.02951 808.29645 461.74323 804.54456 436.06964 799.05865 c
415.78937 794.72516 377.83762 784.03534 367.65643 779.78876 c
361.00244 777.01343 360.35114 777.24878 361.40448 782.04791 c
361.40448 782.04791 l
361.40448 782.04791 l
h
938.22565 1036.6064 m
848.14667 1093.6927 736.89221 1130.2655 637.01038 1135.625 c
624.46497 1136.2982 621.95514 1136.7556 623.34088 1138.1161 c
631.73877 1146.3612 702.74475 1183.3042 732.78979 1195.0603 c
769.08765 1209.2629 810.54553 1221.2548 848.88678 1228.6415 c
866.31976 1232 l
877.49725 1227.5355 l
946.67395 1199.905 1016.6926 1155.0835 1072.3673 1102.7919 c
1094.8171 1081.7062 1129.4039 1044.8407 1127.9559 1043.5408 c
1127.6754 1043.2888 1122.1881 1043.5525 1115.762 1044.1272 c
1073.9613 1047.8638 1015.1882 1043.478 968.94434 1033.1714 c
950.22809 1029 l
938.22565 1036.6064 l
938.22565 1036.6064 l
h
938.22565 1036.6064 m
W*
0 0 1276 1274 rc
-5 1279 m
1281 1279 l
1281 -4.999999 l
-5 -4.999999 l
h
-5 1279 m
f*
ep
end
%%Trailer
%%EOF
